name: Production Server Deploy to AWS EC2

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Docker Run Mysql Container (for local DB)
        run: |
          docker run --name mysql -e "MYSQL_ROOT_PASSWORD=example" -e "MYSQL_DATABASE=api_dev" -p 9001:3306 -d mysql:8 --default-authentication-plugin=mysql_native_password --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci --sql-mode=''

      - name: Wait for DB initialize
        run: |
          chmod 777 ./waitdb.sh
          ./waitdb.sh

      - name: Setup Node.js 12.x
        uses: actions/setup-node@v1
        with:
          node-version: '12.x'

      - name: Cache Node Modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-module
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: NPM Install
        run: |
          npm install

      - name: NPM Lint & Type-Check
        run: |
          npm run lint
          npm run type-check

      - name: NPM Test
        run: |
          cp .env.sample ./.env
          npm test
        env:
          DB_TEST_URL: ${{ secrets.DB_TEST_URL }}
          DB_TEST_DATABASE: ${{ secrets.DB_TEST_DATABASE }}
          DB_PRODUCTION_URL: ${{ secrets.DB_PRODUCTION_URL }}
          DB_PRODUCTION_DATABASE: ${{ secrets.DB_PRODUCTION_DATABASE }}

      - name: Create Zip File
        env:
          PROJECT_NAME: what-do-you-say-server
        run: |
          cp .env .env.sample
          cat .env.sample
          rm -rf node_modules
          zip -r $PROJECT_NAME * .

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Upload to AWS S3
        env:
          PROJECT_NAME: what-do-you-say-server
          S3_BUCKET_NAME: what-do-you-say-bucket
          TAG: ${{ github.sha }}
        run: |
          aws s3 cp $PROJECT_NAME.zip s3://$S3_BUCKET_NAME/$PROJECT_NAME/$PROJECT_NAME-$TAG.zip --region ap-northeast-2

      - name: Deploy to AWS EC2
        env:
          CODE_DEPLOY_APPLICATION_NAME: what-do-you-say-service
          CODE_APPLICATION_DEPLOY_GROUP: what-do-you-say-deploy-group
          PROJECT_NAME: what-do-you-say-server
          S3_BUCKET_NAME: what-do-you-say-bucket
          TAG: ${{ github.sha }}
        run: |
          aws deploy create-deployment \
          --application-name $CODE_DEPLOY_APPLICATION_NAME \
          --deployment-group-name $CODE_APPLICATION_DEPLOY_GROUP \
          --region ap-northeast-2 \
          --s3-location bucket=$S3_BUCKET_NAME,bundleType=zip,key=$PROJECT_NAME/$PROJECT_NAME-$TAG.zip
